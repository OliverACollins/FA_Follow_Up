function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1))
        ;[array[i], array[j]] = [array[j], array[i]]
    }
    return array
}

function assignCondition(stimuli_list) {
    let new_stimuli_list = []
    // Loop through unique styles
    for (let style of [...new Set(stimuli_list.map((a) => a.Style))]) {
        // Get all stimuli of this style
        var style_stimuli = stimuli_list.filter((a) => a.Style == style)

        // Shuffle style_stimuli
        style_stimuli = shuffleArray(style_stimuli) // Custom function defined above

        let shuffledConditions = shuffleArray(conditions) // Shuffle conditions to assign extra images to random conditions
        for (let i = 0; i < remainder; i++) {
            style_stimuli[index].Condition = shuffledConditions[i]
            index++
        }

        // Add to new_stimuli_list
        new_stimuli_list.push(...style_stimuli)
    }
    return shuffleArray(new_stimuli_list)
}

var fiction_trialnumber = 1

stimuli = assignCondition(stimuli_list)


/* var fiction_preloadstims = {
    type: jsPsychPreload,
    images: stimuli_list.map((a) => "stimuli/stimuli/" + a.Item),
    message: "Please wait while the experiment is being loaded (it can take a few minutes)",
} */

var preload = {
      type: jsPsychPreload,
      images: stimuli_list.map((a) => "stimuli/stimuli/" + a.Item),
      message: "Please wait while the experiment is being loaded (it can take a few minutes)"}
      timeline.push(preload);

var fiction_trialnumber = 1


var fiction_fixation = {
    type: jsPsychHtmlKeyboardResponse,
    stimulus: "<div  style='font-size:500%; position:fixed; text-align: center; top:50%; bottom:50%; right:20%; left:20%'>+</div>",
    choices: ["s"],
    trial_duration: 750,
    save_trial_parameters: { trial_duration: true },
    data: { screen: "fiction_fixation" },
}


 var fiction_showimage = {
    type: jsPsychImageKeyboardResponse,
    stimulus: function () {
        return "stimuli/stimuli/" + jsPsych.evaluateTimelineVariable("Item")
    },
    stimulus_width: function () {
        let ratio = jsPsych.evaluateTimelineVariable("Width") / jsPsych.evaluateTimelineVariable("Height")
        return Math.round(Math.min(0.9 * window.innerHeight * ratio, 0.9 * window.innerWidth))
    },

    stimulus_height: function () {
        let ratio = jsPsych.evaluateTimelineVariable("Width") / jsPsych.evaluateTimelineVariable("Height")
        return Math.round(Math.min((0.9 * window.innerWidth) / ratio, 0.9 * window.innerHeight))
    },
    trial_duration: 1500,
    choices: ["s"],
    save_trial_parameters: { trial_duration: true },
    data: function () {
        return {
            screen: "fiction_image",
            trial_number: fiction_trialnumber,
            item: jsPsych.evaluateTimelineVariable("Item"),
        }
    },
    on_finish: function () {
        fiction_trialnumber += 1
    },
} 


var fiction_ratings = {
    type: jsPsychSurvey,
    survey_json: {
        goNextPageAutomatic: false,
        showQuestionNumbers: false,
        showNavigationButtons: true,
        pages: [
            {
                elements: [
                    {
                        type: "html",
                        name: "Instructions",
                        html: "The labels we showed you in the previous phase have been mixed up! Can you tell to what category each image belongs?",
                    },
                    {
                        type: "slider",
                        name: "Reality",
                        title: "I think this artwork is...",
                        description: "Was the artwork painted by a person or generated by an AI?",
                        isRequired: true,
                        // minWidth: "200%",
                        // maxWidth: "200%",
                        min: -100,
                        max: 100,
                        step: 1,
                        customLabels: [
                            {
                                value: -100,
                                text: " AI-generated",
                            },
                            {
                                value: 100,
                                text: "Human creation",
                            },
                        ],
                        // defaultValue: 0,
                    },
                    {
                        type: "slider",
                        name: "Authenticity",
                        title: "I think it was a...",
                        description: "Is the artwork original and unique, or was it made to copy an existing artwork or artist?",
                        isRequired: true,
                        // minWidth: "200%",
                        // maxWidth: "200%",
                        min: -100,
                        max: 100,
                        step: 1,
                        customLabels: [
                            {
                                value: -100,
                                text: "Copy / Forgery",
                            },
                            {
                                value: 100,
                                text: "Original Creation",
                            },
                        ],
                        // defaultValue: 0,
                    },
                ],
            },
        ],
    },
    data: {
        screen: "fiction_ratings",
    },
}


var fiction_phase = {
    timeline_variables: shuffleArray(stimuli),
    timeline: [fiction_fixation, fiction_showimage, fiction_ratings],
}